(root source.jade
    (zone
        (match
            (regex [^\s*\b(include)\b]
                (1 keyword.control.import.include.jade))))
    (zone
        (match
            (regex [^\s*\b(block)\b]
                (1 keyword.control.import.block.jade))))
    (zone
        (match
            (regex [^\s*\b(extends)\b]
                (1 keyword.control.import.include.jade))))
    (zone keyword.other.doctype.jade
        (match
            (regex [^(!!!)(\s*[a-zA-Z0-9-_]+)?])))
    (zone comment.line.double-slash.jade
        (match
            (regex [^ *(//)\s*\S.*$\n?]
                (1 punctuation.section.comment.jade))))
    (zone comment.block.jade
        (start
            (regex [^(\s*)(//)\s*$]
                (2 punctuation.section.comment.jade)))
        (end
            (regex [^(?!\1\s+)])))
    (zone meta.filter.markdown.jade
        (start
            (regex [^(\s*)(\:markdown)]
                (2 entity.name.function.jade)))
        (end
            (regex [^(?!\1\s+)]))
        (subzones
            (include text.html.markdown)))
    (zone meta.filter.sass.jade
        (start
            (regex [^(\s*)(\:sass)]
                (2 entity.name.function.jade)))
        (end
            (regex [^(?!\1\s+)]))
        (subzones
            (include source.sass)))
    (zone meta.filter.less.jade
        (start
            (regex [^(\s*)(\:less)]
                (2 entity.name.function.jade)))
        (end
            (regex [^(?!\1\s+)]))
        (subzones
            (include source.css.less)))
    (zone meta.filter.coffee.jade
        (start
            (regex [^(\s*)(\:coffeescript)]
                (2 entity.name.function.jade)))
        (end
            (regex [^(?!\1\s+)]))
        (subzones
            (include source.coffee)))
    (zone meta.filter.cdata.jade
        (start
            (regex [^(\s*)(\:cdata)]
                (2 entity.name.function.jade)))
        (end
            (regex [^(?!\1\s+)])))
    (zone meta.mixin.jade
        (match
            (regex [^\s*(mixin) ([\w\-]+)\s*(\()(.*?)(\))]
                (3 punctuation.definition.parameters.begin.jade)
                (4 variable.parameter.function.jade)
                (5 punctuation.definition.parameters.end.jade)
                (1 storage.type.function.jade)
                (2 entity.name.function.jade))))
    (zone meta.mixin.jade
        (match
            (regex [^\s*(mixin) ([\w\-]+)]
                (1 storage.type.function.jade)
                (2 constant.name.function.jade))))
    (zone source.js.embedded.jade
        (start
            (regex [^\s*(-|=|!=)]))
        (end
            (regex $))
        (subzones
            (include source.js)
            (zone keyword.control.js
                (match
                    (list each)
                    (boundary.both)))))
    (zone source.js.embedded.jade
        (start
            (regex [^(\s*)(script)]
                (2 constant.name.tag.script.jade)))
        (end
            (regex [^((?=(\1)([\w#\.]|$\n?))|^$\n?)]))
        (subzones
            (zone
                (start
                    (regex [(?<=script)\s*\(]))
                (end
                    (regex [\)]))
                (subzones
                    (include @tag-stuff)))
            (include source.js)))
    (zone string.interpolated.jade
        (match
            (regex [[#!]\{[^\}]+\}])))
    (zone
        (start
            (regex [^\s*(?!\w+\:)(?:(([\w]+))|(?=\.|#))]
                (1 meta.tag.any.jade)
                (2 constant.name.tag.jade)))
        (end
            (regex [$|(?!\.|#|=|-)]
                (1 meta.tag.any.jade)
                (2 constant.name.tag.jade)))
        (subzones
            (zone meta.tag.attribute.class.jade
                (match
                    (regex [\.[\w-]+])))
            (zone meta.tag.attribute.id.jade
                (match
                    (regex [#[\w-]+])))))
    (zone meta.tag.attribute.jade
        (start
            (regex [(?<=\w)\s*\(]))
        (end
            (regex [\)]))
        (subzones
            (include @tag-stuff))))

(collection string-single-quoted
    (zone string.quoted.single.jade
        (start
            (regex '
                (0 punctuation.definition.string.begin.jade)))
        (end
            (regex '
                (0 punctuation.definition.string.end.jade)))
        (subzones
            (include @entities))))

(collection markdown
    (zone
        (start
            (regex markdown\s*$\n?))
        (end
            (regex [(?!^\1\s+)]))
        (subzones
            (include text.html.markdown))))

(collection filter-langs
    (include @markdown)
    (include @sass))

(collection sass
    (zone
        (start
            (regex [^(\s*)\:sass]))
        (end
            (regex [(?!^\1\s+)]))
        (subzones
            (include source.sass))))

(collection tag-stuff
    (include @string-double-quoted)
    (include @string-single-quoted)
    (include @tag-generic-attribute))

(collection tag-generic-attribute
    (zone entity.other.attribute-name.jade
        (match
            (regex [\b([a-zA-Z\-:]+)]))))

(collection entities
    (zone constant.character.entity.jade
        (match
            (regex [(&)([a-zA-Z0-9]+|#[0-9]+|#x[0-9a-fA-F]+)(;)]
                (3 punctuation.definition.entity.jade)
                (1 punctuation.definition.entity.jade))))
    (zone invalid.illegal.bad-ampersand.jade
        (match &)))

(collection string-double-quoted
    (zone string.quoted.double.jade
        (start
            (regex "
                (0 punctuation.definition.string.begin.jade)))
        (end
            (regex "
                (0 punctuation.definition.string.end.jade)))
        (subzones
            (include @entities))))